/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Receiver_H
#define Receiver_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "DCMA_types.h"

namespace dcma { namespace rpc {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ReceiverIf {
 public:
  virtual ~ReceiverIf() {}
  virtual void GetSupportedOperations(std::vector<KnownOperation> & _return, const OperationsQuery& query) = 0;
  virtual void LoadFiles(LoadFilesResponse& _return, const std::vector<LoadFilesQuery> & server_filenames) = 0;
};

class ReceiverIfFactory {
 public:
  typedef ReceiverIf Handler;

  virtual ~ReceiverIfFactory() {}

  virtual ReceiverIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ReceiverIf* /* handler */) = 0;
  };

class ReceiverIfSingletonFactory : virtual public ReceiverIfFactory {
 public:
  ReceiverIfSingletonFactory(const ::std::shared_ptr<ReceiverIf>& iface) : iface_(iface) {}
  virtual ~ReceiverIfSingletonFactory() {}

  virtual ReceiverIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(ReceiverIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<ReceiverIf> iface_;
};

class ReceiverNull : virtual public ReceiverIf {
 public:
  virtual ~ReceiverNull() {}
  void GetSupportedOperations(std::vector<KnownOperation> & /* _return */, const OperationsQuery& /* query */) override {
    return;
  }
  void LoadFiles(LoadFilesResponse& /* _return */, const std::vector<LoadFilesQuery> & /* server_filenames */) override {
    return;
  }
};

typedef struct _Receiver_GetSupportedOperations_args__isset {
  _Receiver_GetSupportedOperations_args__isset() : query(false) {}
  bool query :1;
} _Receiver_GetSupportedOperations_args__isset;

class Receiver_GetSupportedOperations_args {
 public:

  Receiver_GetSupportedOperations_args(const Receiver_GetSupportedOperations_args&) noexcept;
  Receiver_GetSupportedOperations_args& operator=(const Receiver_GetSupportedOperations_args&) noexcept;
  Receiver_GetSupportedOperations_args() noexcept {
  }

  virtual ~Receiver_GetSupportedOperations_args() noexcept;
  OperationsQuery query;

  _Receiver_GetSupportedOperations_args__isset __isset;

  void __set_query(const OperationsQuery& val);

  bool operator == (const Receiver_GetSupportedOperations_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const Receiver_GetSupportedOperations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Receiver_GetSupportedOperations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Receiver_GetSupportedOperations_pargs {
 public:


  virtual ~Receiver_GetSupportedOperations_pargs() noexcept;
  const OperationsQuery* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Receiver_GetSupportedOperations_result__isset {
  _Receiver_GetSupportedOperations_result__isset() : success(false) {}
  bool success :1;
} _Receiver_GetSupportedOperations_result__isset;

class Receiver_GetSupportedOperations_result {
 public:

  Receiver_GetSupportedOperations_result(const Receiver_GetSupportedOperations_result&);
  Receiver_GetSupportedOperations_result& operator=(const Receiver_GetSupportedOperations_result&);
  Receiver_GetSupportedOperations_result() noexcept {
  }

  virtual ~Receiver_GetSupportedOperations_result() noexcept;
  std::vector<KnownOperation>  success;

  _Receiver_GetSupportedOperations_result__isset __isset;

  void __set_success(const std::vector<KnownOperation> & val);

  bool operator == (const Receiver_GetSupportedOperations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Receiver_GetSupportedOperations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Receiver_GetSupportedOperations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Receiver_GetSupportedOperations_presult__isset {
  _Receiver_GetSupportedOperations_presult__isset() : success(false) {}
  bool success :1;
} _Receiver_GetSupportedOperations_presult__isset;

class Receiver_GetSupportedOperations_presult {
 public:


  virtual ~Receiver_GetSupportedOperations_presult() noexcept;
  std::vector<KnownOperation> * success;

  _Receiver_GetSupportedOperations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Receiver_LoadFiles_args__isset {
  _Receiver_LoadFiles_args__isset() : server_filenames(false) {}
  bool server_filenames :1;
} _Receiver_LoadFiles_args__isset;

class Receiver_LoadFiles_args {
 public:

  Receiver_LoadFiles_args(const Receiver_LoadFiles_args&);
  Receiver_LoadFiles_args& operator=(const Receiver_LoadFiles_args&);
  Receiver_LoadFiles_args() noexcept {
  }

  virtual ~Receiver_LoadFiles_args() noexcept;
  std::vector<LoadFilesQuery>  server_filenames;

  _Receiver_LoadFiles_args__isset __isset;

  void __set_server_filenames(const std::vector<LoadFilesQuery> & val);

  bool operator == (const Receiver_LoadFiles_args & rhs) const
  {
    if (!(server_filenames == rhs.server_filenames))
      return false;
    return true;
  }
  bool operator != (const Receiver_LoadFiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Receiver_LoadFiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Receiver_LoadFiles_pargs {
 public:


  virtual ~Receiver_LoadFiles_pargs() noexcept;
  const std::vector<LoadFilesQuery> * server_filenames;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Receiver_LoadFiles_result__isset {
  _Receiver_LoadFiles_result__isset() : success(false) {}
  bool success :1;
} _Receiver_LoadFiles_result__isset;

class Receiver_LoadFiles_result {
 public:

  Receiver_LoadFiles_result(const Receiver_LoadFiles_result&);
  Receiver_LoadFiles_result& operator=(const Receiver_LoadFiles_result&);
  Receiver_LoadFiles_result() noexcept {
  }

  virtual ~Receiver_LoadFiles_result() noexcept;
  LoadFilesResponse success;

  _Receiver_LoadFiles_result__isset __isset;

  void __set_success(const LoadFilesResponse& val);

  bool operator == (const Receiver_LoadFiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Receiver_LoadFiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Receiver_LoadFiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Receiver_LoadFiles_presult__isset {
  _Receiver_LoadFiles_presult__isset() : success(false) {}
  bool success :1;
} _Receiver_LoadFiles_presult__isset;

class Receiver_LoadFiles_presult {
 public:


  virtual ~Receiver_LoadFiles_presult() noexcept;
  LoadFilesResponse* success;

  _Receiver_LoadFiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ReceiverClient : virtual public ReceiverIf {
 public:
  ReceiverClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ReceiverClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetSupportedOperations(std::vector<KnownOperation> & _return, const OperationsQuery& query) override;
  void send_GetSupportedOperations(const OperationsQuery& query);
  void recv_GetSupportedOperations(std::vector<KnownOperation> & _return);
  void LoadFiles(LoadFilesResponse& _return, const std::vector<LoadFilesQuery> & server_filenames) override;
  void send_LoadFiles(const std::vector<LoadFilesQuery> & server_filenames);
  void recv_LoadFiles(LoadFilesResponse& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ReceiverProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ReceiverIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (ReceiverProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetSupportedOperations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LoadFiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ReceiverProcessor(::std::shared_ptr<ReceiverIf> iface) :
    iface_(iface) {
    processMap_["GetSupportedOperations"] = &ReceiverProcessor::process_GetSupportedOperations;
    processMap_["LoadFiles"] = &ReceiverProcessor::process_LoadFiles;
  }

  virtual ~ReceiverProcessor() {}
};

class ReceiverProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ReceiverProcessorFactory(const ::std::shared_ptr< ReceiverIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< ReceiverIfFactory > handlerFactory_;
};

class ReceiverMultiface : virtual public ReceiverIf {
 public:
  ReceiverMultiface(std::vector<std::shared_ptr<ReceiverIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ReceiverMultiface() {}
 protected:
  std::vector<std::shared_ptr<ReceiverIf> > ifaces_;
  ReceiverMultiface() {}
  void add(::std::shared_ptr<ReceiverIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetSupportedOperations(std::vector<KnownOperation> & _return, const OperationsQuery& query) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSupportedOperations(_return, query);
    }
    ifaces_[i]->GetSupportedOperations(_return, query);
    return;
  }

  void LoadFiles(LoadFilesResponse& _return, const std::vector<LoadFilesQuery> & server_filenames) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LoadFiles(_return, server_filenames);
    }
    ifaces_[i]->LoadFiles(_return, server_filenames);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ReceiverConcurrentClient : virtual public ReceiverIf {
 public:
  ReceiverConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ReceiverConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetSupportedOperations(std::vector<KnownOperation> & _return, const OperationsQuery& query) override;
  int32_t send_GetSupportedOperations(const OperationsQuery& query);
  void recv_GetSupportedOperations(std::vector<KnownOperation> & _return, const int32_t seqid);
  void LoadFiles(LoadFilesResponse& _return, const std::vector<LoadFilesQuery> & server_filenames) override;
  int32_t send_LoadFiles(const std::vector<LoadFilesQuery> & server_filenames);
  void recv_LoadFiles(LoadFilesResponse& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
